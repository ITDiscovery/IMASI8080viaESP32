//Disk Boot ROM at FF00
const byte DBLROM[] PROGMEM = {
0x21, 0x13, 0xFF, 0x11, 0x00, 0x2C, 0x0E, 0xEB, 0x7E, 0x12, 0x23, 0x13, 0x0D, 0xC2, 0x08, 0xFF,
0xC3, 0x00, 0x2C, 0xF3, 0xAF, 0xD3, 0x22, 0x2F, 0xD3, 0x23, 0x3E, 0x2C, 0xD3, 0x22, 0x3E, 0x03,
0xD3, 0x10, 0xDB, 0xFF, 0xE6, 0x10, 0x0F, 0x0F, 0xC6, 0x10, 0xD3, 0x10, 0x31, 0x79, 0x2D, 0xAF,
0xD3, 0x08, 0xDB, 0x08, 0xE6, 0x08, 0xC2, 0x1C, 0x2C, 0x3E, 0x04, 0xD3, 0x09, 0xC3, 0x38, 0x2C,
0xDB, 0x08, 0xE6, 0x02, 0xC2, 0x2D, 0x2C, 0x3E, 0x02, 0xD3, 0x09, 0xDB, 0x08, 0xE6, 0x40, 0xC2,
0x2D, 0x2C, 0x11, 0x00, 0x00, 0x06, 0x00, 0x3E, 0x10, 0xF5, 0xD5, 0xC5, 0xD5, 0x11, 0x86, 0x80,
0x21, 0xEB, 0x2C, 0xDB, 0x09, 0x1F, 0xDA, 0x50, 0x2C, 0xE6, 0x1F, 0xB8, 0xC2, 0x50, 0x2C, 0xDB,
0x08, 0xB7, 0xFA, 0x5C, 0x2C, 0xDB, 0x0A, 0x77, 0x23, 0x1D, 0xCA, 0x72, 0x2C, 0x1D, 0xDB, 0x0A,
0x77, 0x23, 0xC2, 0x5C, 0x2C, 0xE1, 0x11, 0xEE, 0x2C, 0x01, 0x80, 0x00, 0x1A, 0x77, 0xBE, 0xC2,
0xCB, 0x2C, 0x80, 0x47, 0x13, 0x23, 0x0D, 0xC2, 0x79, 0x2C, 0x1A, 0xFE, 0xFF, 0xC2, 0x90, 0x2C,
0x13, 0x1A, 0xB8, 0xC1, 0xEB, 0xC2, 0xC2, 0x2C, 0xF1, 0xF1, 0x2A, 0xEC, 0x2C, 0xCD, 0xE5, 0x2C,
0xD2, 0xBB, 0x2C, 0x04, 0x04, 0x78, 0xFE, 0x20, 0xDA, 0x44, 0x2C, 0x06, 0x01, 0xCA, 0x44, 0x2C,
0xDB, 0x08, 0xE6, 0x02, 0xC2, 0xAD, 0x2C, 0x3E, 0x01, 0xD3, 0x09, 0xC3, 0x42, 0x2C, 0x3E, 0x80,
0xD3, 0x08, 0xC3, 0x00, 0x00, 0xD1, 0xF1, 0x3D, 0xC2, 0x46, 0x2C, 0x3E, 0x43, 0x01, 0x3E, 0x4D,
0xFB, 0x32, 0x00, 0x00, 0x22, 0x01, 0x00, 0x47, 0x3E, 0x80, 0xD3, 0x08, 0x78, 0xD3, 0x01, 0xD3,
0x11, 0xD3, 0x05, 0xD3, 0x23, 0xC3, 0xDA, 0x2C, 0x7A, 0xBC, 0xC0, 0x7B, 0xBD, 0xC9, 0x00, 0x00
};
// This data corresponds to memory addresses 0xFC00 through 0xFDFF (512 bytes total)
const byte HDBLROM[512] PROGMEM = {
  0x31, 0x00, 0xC0, 0xCD, 0xA6, 0xFD, 0xCD, 0xBE, 0xFD, 0xDB, 0xA0, 0x07, 0xDA, 0x15, 0xFC, 0x11, 
  0x8D, 0xE1, 0xFD, 0xCD, 0xB1, 0xFD, 0x21, 0x00, 0x00, 0xCD, 0x5B, 0xFC, 0x06, 0x28, 0xDB, 0xA5, 
  0x05, 0xC2, 0x1D, 0xFC, 0xDB, 0xA5, 0x6F, 0xDB, 0xA5, 0x67, 0xDB, 0xA5, 0x5F, 0xDB, 0xA5, 0x57, 
  0xD5, 0x06, 0xD4, 0xDB, 0xA5, 0x05, 0xC2, 0x32, 0xFC, 0x11, 0xEC, 0xFD, 0xCD, 0xB1, 0xFD, 0x11, 
  0x00, 0x00, 0xCD, 0x5B, 0xFC, 0x06, 0x00, 0xDB, 0xA5, 0x12, 0x13, 0x05, 0xC2, 0x46, 0xFC, 0x23, 
  0xE3, 0x2B, 0x7C, 0xB5, 0xCA, 0x5A, 0xFC, 0xE3, 0xC3, 0x41, 0xFC, 0xE9, 0xE5, 0xD5, 0xC5, 0x06, 
  0x30, 0x11, 0x10, 0x00, 0x29, 0x7A, 0x17, 0xB8, 0xDA, 0x6C, 0xFC, 0x90, 0x2C, 0x57, 0x1D, 0xC2, 
  0x63, 0xFC, 0x47, 0x7D, 0xD3, 0xA7, 0xDB, 0xA3, 0x7C, 0xF6, 0x00, 0xD3, 0xA3, 0xCD, 0xA9, 0xFC, 
  0x78, 0xFE, 0x18, 0xDA, 0x89, 0xFC, 0xD6, 0x18, 0xC6, 0x20, 0xD3, 0xA7, 0xDB, 0xA3, 0x3E, 0x30, 
  0xD3, 0xA3, 0xCD, 0xA9, 0xFC, 0xDB, 0xA3, 0xDB, 0xA5, 0xAF, 0xD3, 0xA7, 0x3E, 0x50, 0xD3, 0xA3, 
  0xDB, 0xA4, 0x07, 0xD2, 0x9F, 0xFC, 0xC1, 0xD1, 0xE1, 0xC9, 0xDB, 0xA0, 0x07, 0xD2, 0xA9, 0xFC, 
  0xDB, 0xA1, 0xE6, 0x7F, 0xC8, 0x11, 0xF5, 0xFD, 0xCD, 0xB1, 0xFD, 0xCD, 0x8F, 0xFD, 0xCD, 0xBE, 
  0xFD, 0xC3, 0x06, 0xFD, 0xAF, 0xD3, 0xA0, 0xD3, 0xA2, 0xD3, 0xA4, 0xD3, 0xA6, 0xD3, 0xA1, 0xD3, 
  0xA5, 0x2F, 0xD3, 0xA3, 0xD3, 0xA7, 0x3E, 0x2C, 0xD3, 0xA0, 0xD3, 0xA4, 0xD3, 0xA6, 0x3E, 0x24, 
  0xD3, 0xA2, 0xDB, 0xA1, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x31, 0x00, 0xC0, 0xCD, 0xA6, 0xFD, 0xCD, 0xBE, 0xFD, 0x3E, 0x2E, 0xCD, 0xD5, 0xFD, 0xCD, 0xC8, 
  0xFD, 0xFE, 0x4C, 0xCA, 0x06, 0xFC, 0xFE, 0x4D, 0xCA, 0x24, 0xFD, 0xFE, 0x4A, 0xC2, 0x06, 0xFD, 
  0xCD, 0x54, 0xFD, 0xE9, 0xCD, 0xD3, 0xFD, 0xCD, 0x54, 0xFD, 0x3E, 0x23, 0xCD, 0xBE, 0xFD, 0x7C, 
  0xCD, 0x8F, 0xFD, 0x7D, 0xCD, 0x8F, 0xFD, 0xCD, 0xD3, 0xFD, 0x7E, 0xCD, 0x8F, 0xFD, 0xCD, 0xD3, 
  0xFD, 0xCD, 0x5D, 0xFD, 0xDA, 0x2B, 0xFD, 0x77, 0xBE, 0xCA, 0x2B, 0xFD, 0x3E, 0x3F, 0xCD, 0xD5, 
  0xFD, 0xC3, 0x06, 0xFD, 0xCD, 0x5D, 0xFD, 0x67, 0xCD, 0x5D, 0xFD, 0x6F, 0xC9, 0xCD, 0xC8, 0xFD, 
  0xFE, 0x20, 0x37, 0xC8, 0xCD, 0x74, 0xFD, 0x07, 0x07, 0x07, 0x07, 0x4F, 0xCD, 0xC8, 0xFD, 0xCD, 
  0x74, 0xFD, 0xB1, 0xC9, 0xFE, 0x30, 0xDA, 0x4C, 0xFD, 0xFE, 0x3A, 0xDA, 0x8C, 0xFD, 0xE6, 0x5F, 
  0xFE, 0x41, 0xDA, 0x4C, 0xFD, 0xFE, 0x47, 0xD2, 0x4C, 0xFD, 0xD6, 0x07, 0xE6, 0x0F, 0xC9, 0xF5, 
  0x07, 0x07, 0x07, 0x07, 0xCD, 0x98, 0xFD, 0xF1, 0xE6, 0x0F, 0xFE, 0x0A, 0xDA, 0xA1, 0xFD, 0xC6, 
  0x07, 0xC6, 0x30, 0xC3, 0xD5, 0xFD, 0x3E, 0x03, 0xD3, 0x10, 0x3E, 0x11, 0xD3, 0x10, 0xC3, 0xC3, 
  0xFC, 0xF5, 0x1A, 0xCD, 0xD5, 0xFD, 0x13, 0xE6, 0x80, 0xCA, 0xB2, 0xFD, 0xF1, 0xC9, 0x3E, 0x0D, 
  0xCD, 0xD5, 0xFD, 0x3E, 0x0A, 0xC3, 0xD5, 0xFD, 0xDB, 0x10, 0x0F, 0xD2, 0xC8, 0xFD, 0xDB, 0x11, 
  0xE6, 0x7F, 0xDA, 0x3E, 0x20, 0xF5, 0xDB, 0x10, 0xE6, 0x02, 0xCA, 0xD6, 0xFD, 0xF1, 0xD3, 0x11, 
  0xC9, 0x52, 0x45, 0x53, 0x45, 0x54, 0x20, 0x43, 0x54, 0x4C, 0x0D, 0x8A, 0x4C, 0x4F, 0x41, 0x44, 
  0x49, 0x4E, 0x47, 0x0D, 0x8A, 0x4C, 0x4F, 0x41, 0x44, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0xBA 
};
//Disk Boot ROM at FD00
const byte UBMON[] PROGMEM = { 
0x3E, 0x03, 0xD3, 0x10, 0x3E, 0x11, 0xD3, 0x10, 0x31, 0x00, 0xFC, 0x01, 0x08, 0xFD, 0xC5, 0xCD,
0xA1, 0xFD, 0x3E, 0x2E, 0xCD, 0xF4, 0xFD, 0x21, 0x00, 0xFC, 0xCD, 0xE8, 0xFD, 0xD6, 0x4A, 0xCA,
0x81, 0xFD, 0x80, 0xCC, 0xAC, 0xFD, 0xCA, 0x86, 0xFD, 0x0E, 0x7F, 0xC5, 0x3C, 0xC8, 0x26, 0xFF,
0x82, 0xC8, 0x25, 0xFE, 0x12, 0xC8, 0xC1, 0x84, 0xC0, 0x5D, 0xCD, 0xAC, 0xFD, 0xEB, 0xCD, 0xAC,
0xFD, 0x23, 0x47, 0xCD, 0x75, 0xFD, 0xAF, 0xCD, 0x75, 0xFD, 0x05, 0x7D, 0x93, 0x4F, 0x7C, 0x9A, 
0xC2, 0x54, 0xFD, 0x41, 0xD5, 0x1E, 0x3C, 0x50, 0xCD, 0xA4, 0xFD, 0xD1, 0xCD, 0xA4, 0xFD, 0x83,
0x4F, 0x1A, 0xCD, 0xF4, 0xFD, 0x81, 0x13, 0x05, 0xC2, 0x60, 0xFD, 0xCD, 0xF4, 0xFD, 0x7B, 0x95,
0x7A, 0x9C, 0xDA, 0x4A, 0xFD, 0x06, 0x3C, 0xCD, 0xF4, 0xFD, 0x05, 0xC2, 0x77, 0xFD, 0xC9, 0x34,
0xC8, 0xCC, 0xAC, 0xFD, 0xE9, 0x23, 0xCD, 0xA1, 0xFD, 0xE5, 0xCD, 0xC8, 0xFD, 0xCD, 0xAD, 0xFD,
0x7D, 0x21, 0x85, 0xFD, 0xE3, 0xD0, 0x77, 0xBE, 0xC8, 0x3E, 0x3F, 0xCD, 0xF4, 0xFD, 0xC3, 0x08,
0xFD, 0x11, 0x0D, 0x0A, 0x7B, 0xCD, 0xF4, 0xFD, 0x7A, 0xC3, 0xF4, 0xFD, 0x06, 0x06, 0x03, 0x65,
0xCD, 0xE8, 0xFD, 0xC8, 0xD6, 0x30, 0xFE, 0x08, 0xD2, 0x99, 0xFD, 0x29, 0x29, 0x29, 0xB5, 0x6F,
0x05, 0xC2, 0xB0, 0xFD, 0x37, 0xC3, 0xE3, 0xFD, 0x4E, 0x06, 0x06, 0xAF, 0xCD, 0xD4, 0xFD, 0xAF,
0x06, 0x03, 0x29, 0x17, 0x29, 0x17, 0xC6, 0x30, 0xCD, 0xF4, 0xFD, 0xAF, 0x29, 0x17, 0x05, 0xC2, 
0xD2, 0xFD, 0x61, 0x3E, 0x20, 0xC3, 0xF4, 0xFD, 0xDB, 0x10, 0x0F, 0xD2, 0xE8, 0xFD, 0xDB, 0x11,
0xE6, 0x7F, 0xFE, 0x20, 0xF5, 0xDB, 0x10, 0xE6, 0x02, 0xCA, 0xF5, 0xFD, 0xF1, 0xD3, 0x11, 0xC9
};

//Turnkey Monitor ROM at FD00
const byte TURNMON[] PROGMEM = { 
0x3E, 0x03, 0xD3, 0x10, 0x3E, 0x11, 0xD3, 0x10, 0x31, 0x00, 0xFC, 0xCD, 0x96, 0xFD, 0xCD, 0x96,
0xFD, 0x3E, 0x2E, 0xCD, 0xF2, 0xFD, 0xCD, 0xE8, 0xFD, 0xFE, 0x4D, 0xCA, 0x2C, 0xFD, 0xFE, 0x44,
0xCA, 0x54, 0xFD, 0xFE, 0x4A, 0xC2, 0x08, 0xFD, 0xCD, 0xA0, 0xFD, 0xE9, 0xCD, 0xA0, 0xFD, 0xC3,
0x33, 0xFD, 0x23, 0xCD, 0x96, 0xFD, 0x54, 0x5D, 0xCD, 0xC6, 0xFD, 0x1A, 0x67, 0xCD, 0xCC, 0xFD, 
0xCD, 0xA5, 0xFD, 0xEB, 0xDA, 0x32, 0xFD, 0x77, 0xBE, 0xCA, 0x32, 0xFD, 0x3E, 0x3F, 0xCD, 0xF2,
0xFD, 0xC3, 0x08, 0xFD, 0xCD, 0xA0, 0xFD, 0xEB, 0xD4, 0xE3, 0xFD, 0xCD, 0xA0, 0xFD, 0xE5, 0x62,
0x6B, 0xCD, 0x96, 0xFD, 0xCD, 0xC6, 0xFD, 0xCD, 0xE3, 0xFD, 0x01, 0x10, 0x00, 0x1A, 0x67, 0xC5,
0x3E, 0x08, 0xB9, 0xC2, 0x7E, 0xFD, 0x3E, 0x2D, 0xCD, 0xF2, 0xFD, 0xCD, 0xE3, 0xFD, 0xCD, 0xCC,
0xFD, 0xC1, 0xE1, 0x7C, 0xBA, 0xC2, 0x8D, 0xFD, 0x7D, 0xBB, 0xCA, 0x08, 0xFD, 0xE5, 0x13, 0x0D,
0xC2, 0x6D, 0xFD, 0xC3, 0x5F, 0xFD, 0x3E, 0x0D, 0xCD, 0xF2, 0xFD, 0x3E, 0x0A, 0xC3, 0xF2, 0xFD,
0x06, 0x06, 0xC3, 0xA7, 0xFD, 0x06, 0x03, 0x21, 0x00, 0x00, 0xCD, 0xE8, 0xFD, 0x4F, 0xFE, 0x20,
0x37, 0xC8, 0xE6, 0xB8, 0xEE, 0x30, 0xC2, 0x4C, 0xFD, 0x79, 0xE6, 0x07, 0x29, 0x29, 0x29, 0x85,
0x6F, 0x05, 0xC2, 0xAA, 0xFD, 0xC9, 0x06, 0x06, 0xAF, 0xC3, 0xD6, 0xFD, 0x06, 0x03, 0xAF, 0xC3,
0xD3, 0xFD, 0x29, 0x17, 0x29, 0x17, 0x29, 0x17, 0xE6, 0x07, 0xF6, 0x30, 0xCD, 0xF2, 0xFD, 0x05,
0xC2, 0xD2, 0xFD, 0x3E, 0x20, 0xC3, 0xF2, 0xFD, 0xDB, 0x10, 0x0F, 0xD2, 0xE8, 0xFD, 0xDB, 0x11,
0xE6, 0x7F, 0xFE, 0x20, 0xF5, 0xDB, 0x10, 0xE6, 0x02, 0xCA, 0xF5, 0xFD, 0xF1, 0xD3, 0x11, 0xC9
};


//Echo for SIO 
//https://www.penguinstew.ca/Writings/60/Computers/Programming/Projects/Altair%208800/Serial%20Echo
//Size is 13
const byte EchoSIO[] PROGMEM = {
0xDB, 0x00, 0x0F, 0xDA, 0x00, 0x00, 0xDB, 0x01, 0xD3, 0x01, 0xC3, 0x00, 0x00
};

//Size is 64
const byte EchoSIOInt[] PROGMEM = {
0x31, 0x00, 0x01, 0x3E, 0x01, 0xD3, 0x00, 0xFB, 0x00, 0x00, 0x00, 0xC3, 0x08, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0xDB, 0x01, 0xD3, 0x01, 0xF1, 0xFB, 0xC9
};

// Echo program for ports 0x12 (Status) / 0x13 (Data)
// Size: 22 bytes
const byte EchoTelnet[] PROGMEM = {
  0xDB, 0x12, // LOOP: IN 12H
  0xE6, 0x01, //       ANI 01H
  0xCA, 0x00, 0x00, //   JZ LOOP (to 0000H)
  0xDB, 0x13, //       IN 13H
  0x47,       //       MOV B,A
  0xDB, 0x12, // WAIT_TX: IN 12H
  0xE6, 0x02, //       ANI 02H
  0xCA, 0x0A, 0x00, //   JZ WAIT_TX (to 000AH - adjusted address)
  0x78,       //       MOV A,B
  0xD3, 0x13, //       OUT 13H
  0xC3, 0x00, 0x00  //   JMP LOOP (to 0000H)
};
// Size is 26
const byte BenchMark[] PROGMEM = {
    0x01, 0x00, 0x00, // LXI B, 0000H
    0x06, 0xFF,       // MVI B, FFH
    0x0E, 0xFF,       // MVI C, FFH
    0x00,             // NOP (0007H)
    0x0D,             // DCR C
    0x79,             // MOV A, C     <-- FIX: Ensures ZF is set correctly
    0xB7,             // ORA A        <-- FIX: Ensures ZF is set correctly
    0xC2, 0x07, 0x00, // JNZ 0007H    <-- Jump Address for inner loop
    0x05,             // DCR B
    0xC2, 0x05, 0x00, // JNZ 0005H    <-- Jump Address for outer loop
    0x3E, 0x0A,       // MVI A, 0AH
    0xDB, 0xF0,       // IN F0H       <-- Trap Instruction
    0xC3, 0x00, 0x00, // JMP 0000H
    0x00              // Final byte to ensure size is 26
};
// Altair 8800 Memory Test Program
// As documented in: http://dunfield.classiccmp.org/altair/d/8800mtst.pdf
//
// This version is pre-configured to test the memory range
// from 0x0100 (Start Address) to 0xFFFF (Stop Address).

const byte AltairMemTest[] PROGMEM = {
  0x21, 0x00, 0x00, // 0000: LXI H,L (Stop Address: 0x0000)
  0x11, 0x00, 0x01, // 0003: LXI D,E (Start Address: 0x0100)
  0x3E, 0xFF,       // 0006: MVI A, 0xFF
  0x47,             // 0008: MOV B,A
  0x12,             // 0009: STAX D,E
  0x32, 0x2E, 0x00, // 000A: STA 002EH (Store bad data)
  0x1A,             // 000D: LDAX D,E
  0xB8,             // 000E: CMP B
  0xCA, 0x19, 0x00, // 000F: JZ 0019H (Jump if OK)
  0xEB,             // 0012: XCHG
  0x22, 0x2C, 0x00, // 0013: SHLD 002CH (Store bad address)
  0xC3, 0x13, 0x00, // 0016: JMP 0013H (Halt loop)
  0xD6, 0x01,       // 0019: SUI 0x01
  0xD2, 0x08, 0x00, // 001B: JNC 0008H (Loop for next data byte)
  0x13,             // 001E: INX D,E (Increment memory address)
  0x7A,             // 001F: MOV A,D
  0xBC,             // 0020: CMP H
  0xC2, 0x06, 0x00, // 0021: JNZ 0006H (Loop if not stop address)
  0x7B,             // 0024: MOV A,E
  0xBD,             // 0025: CMP L
  0xC2, 0x06, 0x00, // 0026: JNZ 0006H (Loop if not stop address)
  0xC3, 0x13, 0x00  // 0029: JMP 0013H (Finished, go to halt)
};
